version: '3.2'

services:
  elasticsearch:
    mem_limit: 512mb
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    mem_limit: 512mb
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    mem_limit: 512mb
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
  filebeat:
    mem_limit: 256mb
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: filebeat
    entrypoint: filebeat -e -strict.perms=false
    user: root
    networks:
      - elk
    volumes:
    - 'log:/var/log/'
  zookeeper1:
    mem_limit: 256mb
    image: confluentinc/cp-zookeeper
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - elk
  kafka1:
    mem_limit: 512mb
    image: confluentinc/cp-kafka
    container_name: kafka1
    ports:
      - "9099:9099"
    depends_on:
      - zookeeper1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092, EXTERNAL://kafka1:9099
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:9099
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - elk
  eureka:
    build:
      context: D:\epam\projects\docker-elk\eureka\
    mem_limit: 512mb
    container_name: eureka
    image: eureka:latest

    volumes:
      - "./web/src:/web/src"
      - 'log:/var/log/'
    ports:
      - "8282:8282"
    environment:
      - CONFIG_HOST=config

    depends_on:
      - config
    restart:
      on-failure:10

    networks:
      - elk
  config:
    mem_limit: 256mb
    build:
      context: D:\epam\projects\docker-elk\config\
    container_name: config
    image: config:latest

    volumes:
      - "./web/src:/web/src"
      - 'log:/var/log/'
    ports:
      - "8888:8888"
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
  log:
